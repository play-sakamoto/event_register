import { Event } from '../types/event';
// Assume getCsrfToken is available from a utility file e.g. 'app/javascript/src/utils/csrf.ts'
// If not, this would need to be implemented or imported from the correct location.
// For now, we'll define a placeholder if it's not crucial for GET requests.
const getCsrfToken = (): string | null => {
  const tokenMeta = document.querySelector('meta[name="csrf-token"]');
  return tokenMeta ? tokenMeta.getAttribute('content') : null;
};

const BASE_URL = '/api/v1/events';

export const getEvents = async (): Promise<Event[]> => {
  try {
    const response = await fetch(BASE_URL, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        // CSRF token usually not needed for GET, but include if your app requires it
      },
    });
    if (!response.ok) {
      throw new Error(`Error fetching events: ${response.statusText}`);
    }
    return await response.json() as Event[];
  } catch (error) {
    console.error('Failed to get events:', error);
    throw error; // Re-throw to allow caller to handle
  }
};

export const updateEvent = async (id: number, eventData: Partial<EventCreationData>): Promise<Event> => {
  const csrfToken = getCsrfToken();
  if (!csrfToken) {
    console.error('CSRF token not found');
    throw new Error('CSRF token not found. Cannot process update request.');
  }

  try {
    const response = await fetch(`${BASE_URL}/${id}`, {
      method: 'PATCH', // Or PUT, depending on your API's convention for updates
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken,
      },
      body: JSON.stringify({ event: eventData }), // Rails typically expects parameters nested under model name
    });
    if (!response.ok) {
      const errorBody = await response.json().catch(() => ({}));
      console.error('Error updating event:', response.statusText, errorBody);
      throw new Error(`Error updating event ${id}: ${response.statusText} ${JSON.stringify(errorBody.errors || errorBody)}`);
    }
    return await response.json() as Event;
  } catch (error) {
    console.error(`Failed to update event ${id}:`, error);
    throw error;
  }
};

// Type for event data when creating (excluding fields generated by backend)
export type EventCreationData = Omit<Event, 'id' | 'user_id' | 'itemCount' | 'totalSales' | 'created_at' | 'updated_at'>;

export const createEvent = async (eventData: EventCreationData): Promise<Event> => {
  const csrfToken = getCsrfToken();
  if (!csrfToken) {
    console.error('CSRF token not found');
    throw new Error('CSRF token not found. Cannot process create request.');
  }

  try {
    const response = await fetch(BASE_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken,
      },
      body: JSON.stringify({ event: eventData }), // Rails typically expects parameters nested under model name
    });
    if (!response.ok) {
      // Attempt to parse error response body for more details
      const errorBody = await response.json().catch(() => ({})); // Catch if error body is not JSON
      console.error('Error creating event:', response.statusText, errorBody);
      throw new Error(`Error creating event: ${response.statusText} ${JSON.stringify(errorBody.errors || errorBody)}`);
    }
    return await response.json() as Event;
  } catch (error) {
    console.error('Failed to create event:', error);
    throw error;
  }
};

export const getEvent = async (id: number): Promise<Event> => {
  try {
    const response = await fetch(`${BASE_URL}/${id}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    });
    if (!response.ok) {
      if (response.status === 404) {
        throw new Error('Event not found');
      }
      throw new Error(`Error fetching event ${id}: ${response.statusText}`);
    }
    return await response.json() as Event;
  } catch (error) {
    console.error(`Failed to get event ${id}:`, error);
    throw error;
  }
};

export const deleteEvent = async (id: number): Promise<void> => {
  const csrfToken = getCsrfToken();
  if (!csrfToken) {
    console.error('CSRF token not found');
    throw new Error('CSRF token not found. Cannot process delete request.');
  }

  try {
    const response = await fetch(`${BASE_URL}/${id}`, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': csrfToken,
      },
    });
    if (!response.ok) {
      // For DELETE, often a 204 No Content is success, check for that or other success codes
      if (response.status === 204) {
        return; // Successfully deleted
      }
      throw new Error(`Error deleting event: ${response.statusText}`);
    }
    // If backend returns a body on delete (e.g. confirmation), handle here
    // otherwise, for 204, there's no body to parse.
  } catch (error) {
    console.error(`Failed to delete event ${id}:`, error);
    throw error; // Re-throw to allow caller to handle
  }
};
